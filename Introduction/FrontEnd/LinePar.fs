// Implementation file for parser generated by fsyacc
module LinePar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "LinePar.fsy"


 (* Parser for Straight-line language *)

 open Absyn


# 14 "LinePar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAR
  | RPAR
  | COMMA
  | SEMI
  | ASSIGN
  | PRINT
  | NUM of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_PRINT
    | TOKEN_NUM
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Stmt
    | NONTERM_ExpList
    | NONTERM_Exp
    | NONTERM_BinOp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PLUS  -> 1 
  | MINUS  -> 2 
  | TIMES  -> 3 
  | DIV  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | COMMA  -> 7 
  | SEMI  -> 8 
  | ASSIGN  -> 9 
  | PRINT  -> 10 
  | NUM _ -> 11 
  | ID _ -> 12 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PLUS 
  | 2 -> TOKEN_MINUS 
  | 3 -> TOKEN_TIMES 
  | 4 -> TOKEN_DIV 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_SEMI 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_PRINT 
  | 11 -> TOKEN_NUM 
  | 12 -> TOKEN_ID 
  | 15 -> TOKEN_end_of_input
  | 13 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Stmt 
    | 3 -> NONTERM_Stmt 
    | 4 -> NONTERM_Stmt 
    | 5 -> NONTERM_ExpList 
    | 6 -> NONTERM_ExpList 
    | 7 -> NONTERM_Exp 
    | 8 -> NONTERM_Exp 
    | 9 -> NONTERM_Exp 
    | 10 -> NONTERM_Exp 
    | 11 -> NONTERM_BinOp 
    | 12 -> NONTERM_BinOp 
    | 13 -> NONTERM_BinOp 
    | 14 -> NONTERM_BinOp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 15 
let _fsyacc_tagOfErrorTerminal = 13

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COMMA  -> "COMMA" 
  | SEMI  -> "SEMI" 
  | ASSIGN  -> "ASSIGN" 
  | PRINT  -> "PRINT" 
  | NUM _ -> "NUM" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 6us; 4us; 22us; 5us; 2us; 65535us; 11us; 12us; 15us; 16us; 5us; 65535us; 8us; 9us; 11us; 14us; 15us; 14us; 21us; 19us; 23us; 20us; 4us; 65535us; 9us; 21us; 14us; 21us; 19us; 21us; 20us; 21us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 10us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 10us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 3us; 9us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 3us; 5us; 6us; 9us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 9us; 9us; 2us; 9us; 10us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 15us; 17us; 19us; 21us; 24us; 26us; 28us; 30us; 32us; 36us; 38us; 40us; 42us; 44us; 47us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; |]
let _fsyacc_action_rows = 29
let _fsyacc_actionTableElements = [|2us; 32768us; 10us; 10us; 12us; 7us; 0us; 49152us; 2us; 32768us; 0us; 3us; 8us; 6us; 0us; 16385us; 1us; 16386us; 8us; 6us; 2us; 32768us; 7us; 23us; 8us; 6us; 2us; 32768us; 10us; 10us; 12us; 7us; 1us; 32768us; 9us; 8us; 3us; 32768us; 5us; 22us; 11us; 18us; 12us; 17us; 4us; 16387us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 1us; 32768us; 5us; 11us; 3us; 32768us; 5us; 22us; 11us; 18us; 12us; 17us; 1us; 32768us; 6us; 13us; 0us; 16388us; 5us; 16389us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 7us; 15us; 3us; 32768us; 5us; 22us; 11us; 18us; 12us; 17us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 4us; 16393us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 32768us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 24us; 3us; 32768us; 5us; 22us; 11us; 18us; 12us; 17us; 2us; 32768us; 10us; 10us; 12us; 7us; 3us; 32768us; 5us; 22us; 11us; 18us; 12us; 17us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 7us; 8us; 10us; 13us; 16us; 18us; 22us; 27us; 29us; 33us; 35us; 36us; 42us; 46us; 47us; 48us; 49us; 54us; 60us; 64us; 67us; 71us; 72us; 73us; 74us; 75us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 4us; 1us; 3us; 1us; 1us; 3us; 5us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 16390us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 16397us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 160 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 169 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "LinePar.fsy"
                                                               _1 
                   )
# 29 "LinePar.fsy"
                 : Absyn.Stmt));
# 180 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "LinePar.fsy"
                                                               CompoundStmt(_1, _3) 
                   )
# 35 "LinePar.fsy"
                 : 'Stmt));
# 192 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "LinePar.fsy"
                                                               AssignStmt(_1, _3)   
                   )
# 36 "LinePar.fsy"
                 : 'Stmt));
# 204 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "LinePar.fsy"
                                                               PrintStmt _3         
                   )
# 37 "LinePar.fsy"
                 : 'Stmt));
# 215 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "LinePar.fsy"
                                                               [_1]                 
                   )
# 41 "LinePar.fsy"
                 : 'ExpList));
# 226 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "LinePar.fsy"
                                                               _1::_3               
                   )
# 42 "LinePar.fsy"
                 : 'ExpList));
# 238 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "LinePar.fsy"
                                                               IdExp _1             
                   )
# 46 "LinePar.fsy"
                 : 'Exp));
# 249 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "LinePar.fsy"
                                                               NumExp _1            
                   )
# 47 "LinePar.fsy"
                 : 'Exp));
# 260 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'BinOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "LinePar.fsy"
                                                               OpExp(_1, _2, _3)    
                   )
# 48 "LinePar.fsy"
                 : 'Exp));
# 273 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "LinePar.fsy"
                                                               SeqExp(_2, _4)       
                   )
# 49 "LinePar.fsy"
                 : 'Exp));
# 285 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "LinePar.fsy"
                                                               Plus                 
                   )
# 53 "LinePar.fsy"
                 : 'BinOp));
# 295 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "LinePar.fsy"
                                                               Minus                
                   )
# 54 "LinePar.fsy"
                 : 'BinOp));
# 305 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "LinePar.fsy"
                                                               Times                
                   )
# 55 "LinePar.fsy"
                 : 'BinOp));
# 315 "LinePar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "LinePar.fsy"
                                                               Div                  
                   )
# 56 "LinePar.fsy"
                 : 'BinOp));
|]
# 326 "LinePar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 16;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.Stmt =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
