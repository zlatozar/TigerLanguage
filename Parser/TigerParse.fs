// Implementation file for parser generated by fsyacc
module TigerParse
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TigerParse.fsy"


(* Parser specification for Tiger Language *)

open Microsoft.FSharp.Text.Parsing

open Absyn
open Store

let getStartPos (parseState: IParseState) lexIdx =
    let pos = parseState.InputStartPosition lexIdx
    (pos.Line + 1, pos.Column)

let getEndPos (parseState: IParseState) lexIdx =
    let pos = parseState.InputEndPosition lexIdx
    (pos.Line + 1, pos.Column)


# 25 "TigerParse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | GT
  | GE
  | LT
  | LE
  | EQ
  | NEQ
  | AND
  | OR
  | TIMES
  | DIVIDE
  | PLUS
  | MINUS
  | UMINUS
  | LBRACE
  | RBRACE
  | SEMICOLON
  | COLON
  | COMMA
  | ASSIGN
  | DOT
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | THEN
  | TO
  | TYPE
  | VAR
  | WHILE
  | FUNCTION
  | IF
  | IN
  | LET
  | NIL
  | OF
  | ARRAY
  | BREAK
  | DO
  | ELSE
  | END
  | FOR
  | ID of (string)
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_UMINUS
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_DOT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_THEN
    | TOKEN_TO
    | TOKEN_TYPE
    | TOKEN_VAR
    | TOKEN_WHILE
    | TOKEN_FUNCTION
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NIL
    | TOKEN_OF
    | TOKEN_ARRAY
    | TOKEN_BREAK
    | TOKEN_DO
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FOR
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_decs
    | NONTERM_tyDec
    | NONTERM_ty
    | NONTERM_tyFields
    | NONTERM_tyFieldsCont
    | NONTERM_varDec
    | NONTERM_funDec
    | NONTERM_exp
    | NONTERM_expSeq
    | NONTERM_expSeqCont
    | NONTERM_actualArgs
    | NONTERM_argsCont
    | NONTERM_recordFields
    | NONTERM_recordFieldsCont
    | NONTERM_variable
    | NONTERM_variableCont

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | GT  -> 1 
  | GE  -> 2 
  | LT  -> 3 
  | LE  -> 4 
  | EQ  -> 5 
  | NEQ  -> 6 
  | AND  -> 7 
  | OR  -> 8 
  | TIMES  -> 9 
  | DIVIDE  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | UMINUS  -> 13 
  | LBRACE  -> 14 
  | RBRACE  -> 15 
  | SEMICOLON  -> 16 
  | COLON  -> 17 
  | COMMA  -> 18 
  | ASSIGN  -> 19 
  | DOT  -> 20 
  | LPAREN  -> 21 
  | RPAREN  -> 22 
  | LBRACK  -> 23 
  | RBRACK  -> 24 
  | THEN  -> 25 
  | TO  -> 26 
  | TYPE  -> 27 
  | VAR  -> 28 
  | WHILE  -> 29 
  | FUNCTION  -> 30 
  | IF  -> 31 
  | IN  -> 32 
  | LET  -> 33 
  | NIL  -> 34 
  | OF  -> 35 
  | ARRAY  -> 36 
  | BREAK  -> 37 
  | DO  -> 38 
  | ELSE  -> 39 
  | END  -> 40 
  | FOR  -> 41 
  | ID _ -> 42 
  | STRING _ -> 43 
  | INT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_GT 
  | 2 -> TOKEN_GE 
  | 3 -> TOKEN_LT 
  | 4 -> TOKEN_LE 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_NEQ 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_TIMES 
  | 10 -> TOKEN_DIVIDE 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_UMINUS 
  | 14 -> TOKEN_LBRACE 
  | 15 -> TOKEN_RBRACE 
  | 16 -> TOKEN_SEMICOLON 
  | 17 -> TOKEN_COLON 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_ASSIGN 
  | 20 -> TOKEN_DOT 
  | 21 -> TOKEN_LPAREN 
  | 22 -> TOKEN_RPAREN 
  | 23 -> TOKEN_LBRACK 
  | 24 -> TOKEN_RBRACK 
  | 25 -> TOKEN_THEN 
  | 26 -> TOKEN_TO 
  | 27 -> TOKEN_TYPE 
  | 28 -> TOKEN_VAR 
  | 29 -> TOKEN_WHILE 
  | 30 -> TOKEN_FUNCTION 
  | 31 -> TOKEN_IF 
  | 32 -> TOKEN_IN 
  | 33 -> TOKEN_LET 
  | 34 -> TOKEN_NIL 
  | 35 -> TOKEN_OF 
  | 36 -> TOKEN_ARRAY 
  | 37 -> TOKEN_BREAK 
  | 38 -> TOKEN_DO 
  | 39 -> TOKEN_ELSE 
  | 40 -> TOKEN_END 
  | 41 -> TOKEN_FOR 
  | 42 -> TOKEN_ID 
  | 43 -> TOKEN_STRING 
  | 44 -> TOKEN_INT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_decs 
    | 3 -> NONTERM_decs 
    | 4 -> NONTERM_decs 
    | 5 -> NONTERM_decs 
    | 6 -> NONTERM_tyDec 
    | 7 -> NONTERM_ty 
    | 8 -> NONTERM_ty 
    | 9 -> NONTERM_ty 
    | 10 -> NONTERM_tyFields 
    | 11 -> NONTERM_tyFields 
    | 12 -> NONTERM_tyFieldsCont 
    | 13 -> NONTERM_tyFieldsCont 
    | 14 -> NONTERM_varDec 
    | 15 -> NONTERM_varDec 
    | 16 -> NONTERM_funDec 
    | 17 -> NONTERM_funDec 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exp 
    | 22 -> NONTERM_exp 
    | 23 -> NONTERM_exp 
    | 24 -> NONTERM_exp 
    | 25 -> NONTERM_exp 
    | 26 -> NONTERM_exp 
    | 27 -> NONTERM_exp 
    | 28 -> NONTERM_exp 
    | 29 -> NONTERM_exp 
    | 30 -> NONTERM_exp 
    | 31 -> NONTERM_exp 
    | 32 -> NONTERM_exp 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_expSeq 
    | 47 -> NONTERM_expSeq 
    | 48 -> NONTERM_expSeqCont 
    | 49 -> NONTERM_expSeqCont 
    | 50 -> NONTERM_actualArgs 
    | 51 -> NONTERM_actualArgs 
    | 52 -> NONTERM_argsCont 
    | 53 -> NONTERM_argsCont 
    | 54 -> NONTERM_recordFields 
    | 55 -> NONTERM_recordFields 
    | 56 -> NONTERM_recordFieldsCont 
    | 57 -> NONTERM_recordFieldsCont 
    | 58 -> NONTERM_variable 
    | 59 -> NONTERM_variable 
    | 60 -> NONTERM_variableCont 
    | 61 -> NONTERM_variableCont 
    | 62 -> NONTERM_variableCont 
    | 63 -> NONTERM_variableCont 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | UMINUS  -> "UMINUS" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | DOT  -> "DOT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | THEN  -> "THEN" 
  | TO  -> "TO" 
  | TYPE  -> "TYPE" 
  | VAR  -> "VAR" 
  | WHILE  -> "WHILE" 
  | FUNCTION  -> "FUNCTION" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NIL  -> "NIL" 
  | OF  -> "OF" 
  | ARRAY  -> "ARRAY" 
  | BREAK  -> "BREAK" 
  | DO  -> "DO" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FOR  -> "FOR" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | UMINUS  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 4us; 65535us; 4us; 5us; 6us; 7us; 8us; 9us; 89us; 90us; 4us; 65535us; 4us; 4us; 6us; 4us; 8us; 4us; 89us; 4us; 1us; 65535us; 12us; 13us; 2us; 65535us; 15us; 16us; 40us; 41us; 2us; 65535us; 23us; 24us; 28us; 29us; 4us; 65535us; 4us; 6us; 6us; 6us; 8us; 6us; 89us; 6us; 4us; 65535us; 4us; 8us; 6us; 8us; 8us; 8us; 89us; 8us; 37us; 65535us; 0us; 2us; 32us; 33us; 36us; 37us; 43us; 44us; 47us; 48us; 54us; 55us; 57us; 110us; 63us; 64us; 66us; 67us; 68us; 108us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 83us; 84us; 85us; 86us; 87us; 88us; 91us; 108us; 94us; 95us; 115us; 96us; 116us; 97us; 117us; 98us; 118us; 99us; 119us; 100us; 120us; 101us; 121us; 102us; 122us; 103us; 123us; 104us; 124us; 105us; 125us; 106us; 126us; 107us; 128us; 109us; 131us; 111us; 134us; 112us; 138us; 113us; 145us; 114us; 2us; 65535us; 68us; 69us; 91us; 92us; 2us; 65535us; 108us; 127us; 109us; 129us; 1us; 65535us; 57us; 58us; 2us; 65535us; 110us; 130us; 111us; 132us; 1us; 65535us; 60us; 61us; 2us; 65535us; 112us; 135us; 113us; 139us; 37us; 65535us; 0us; 53us; 32us; 53us; 36us; 53us; 43us; 53us; 47us; 53us; 54us; 53us; 57us; 53us; 63us; 53us; 66us; 53us; 68us; 53us; 71us; 53us; 73us; 53us; 75us; 53us; 77us; 53us; 79us; 53us; 83us; 53us; 85us; 53us; 87us; 53us; 91us; 53us; 94us; 53us; 115us; 53us; 116us; 53us; 117us; 53us; 118us; 53us; 119us; 53us; 120us; 53us; 121us; 53us; 122us; 53us; 123us; 53us; 124us; 53us; 125us; 53us; 126us; 53us; 128us; 53us; 131us; 53us; 134us; 53us; 138us; 53us; 145us; 53us; 37us; 65535us; 0us; 140us; 32us; 140us; 36us; 140us; 43us; 140us; 47us; 140us; 54us; 140us; 57us; 140us; 63us; 140us; 66us; 140us; 68us; 140us; 71us; 140us; 73us; 140us; 75us; 140us; 77us; 140us; 79us; 140us; 83us; 140us; 85us; 140us; 87us; 140us; 91us; 140us; 94us; 140us; 115us; 140us; 116us; 140us; 117us; 140us; 118us; 140us; 119us; 140us; 120us; 140us; 121us; 140us; 122us; 140us; 123us; 140us; 124us; 140us; 125us; 140us; 126us; 140us; 128us; 140us; 131us; 140us; 134us; 140us; 138us; 140us; 145us; 140us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 8us; 13us; 15us; 18us; 21us; 26us; 31us; 69us; 72us; 75us; 77us; 80us; 82us; 85us; 123us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 13us; 1us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 2us; 14us; 15us; 2us; 14us; 15us; 1us; 14us; 13us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 15us; 1us; 15us; 1us; 15us; 13us; 15us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 13us; 16us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 17us; 1us; 17us; 1us; 17us; 13us; 17us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 2us; 22us; 23us; 1us; 23us; 13us; 23us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 6us; 24us; 25us; 26us; 58us; 60us; 62us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 2us; 26us; 62us; 14us; 26us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 62us; 2us; 26us; 62us; 1us; 26us; 13us; 26us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 27us; 1us; 27us; 1us; 27us; 2us; 28us; 29us; 14us; 28us; 29us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 2us; 28us; 29us; 14us; 28us; 29us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 28us; 13us; 28us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 30us; 13us; 30us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 30us; 13us; 30us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 31us; 1us; 31us; 1us; 31us; 13us; 31us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 31us; 13us; 31us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 31us; 13us; 31us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 13us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 47us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 49us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 51us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 53us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 55us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 57us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 63us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 47us; 1us; 49us; 1us; 49us; 1us; 51us; 1us; 53us; 1us; 53us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 57us; 3us; 59us; 61us; 63us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 63us; 1us; 63us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 75us; 78us; 80us; 94us; 96us; 98us; 100us; 114us; 117us; 120us; 123us; 126us; 129us; 131us; 145us; 147us; 149us; 151us; 165us; 167us; 169us; 171us; 173us; 176us; 178us; 192us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 214us; 229us; 232us; 234us; 248us; 250us; 252us; 254us; 257us; 272us; 275us; 290us; 292us; 306us; 308us; 322us; 324us; 338us; 340us; 342us; 344us; 358us; 360us; 374us; 376us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 416us; 430us; 444us; 458us; 472us; 486us; 500us; 514us; 528us; 542us; 556us; 570us; 584us; 598us; 612us; 626us; 640us; 654us; 668us; 682us; 684us; 686us; 688us; 690us; 692us; 694us; 696us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 712us; 714us; 716us; 718us; 720us; 722us; 724us; 726us; 728us; 730us; 732us; 736us; 738us; 740us; 742us; 744us; 746us; |]
let _fsyacc_action_rows = 147
let _fsyacc_actionTableElements = [|11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 49152us; 13us; 32768us; 0us; 3us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 0us; 16385us; 3us; 16386us; 27us; 10us; 28us; 30us; 30us; 38us; 0us; 16387us; 3us; 16386us; 27us; 10us; 28us; 30us; 30us; 38us; 0us; 16388us; 3us; 16386us; 27us; 10us; 28us; 30us; 30us; 38us; 0us; 16389us; 1us; 32768us; 42us; 11us; 1us; 32768us; 5us; 12us; 3us; 32768us; 14us; 15us; 36us; 18us; 42us; 14us; 0us; 16390us; 0us; 16391us; 1us; 16394us; 42us; 21us; 1us; 32768us; 15us; 17us; 0us; 16392us; 1us; 32768us; 35us; 19us; 1us; 32768us; 42us; 20us; 0us; 16393us; 1us; 32768us; 17us; 22us; 1us; 32768us; 42us; 23us; 1us; 16396us; 18us; 25us; 0us; 16395us; 1us; 32768us; 42us; 26us; 1us; 32768us; 17us; 27us; 1us; 32768us; 42us; 28us; 1us; 16396us; 18us; 25us; 0us; 16397us; 1us; 32768us; 42us; 31us; 2us; 32768us; 17us; 34us; 19us; 32us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16398us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 1us; 32768us; 42us; 35us; 1us; 32768us; 19us; 36us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16399us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 1us; 32768us; 42us; 39us; 1us; 32768us; 21us; 40us; 1us; 16394us; 42us; 21us; 1us; 32768us; 22us; 42us; 2us; 32768us; 5us; 43us; 17us; 45us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16400us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 1us; 32768us; 42us; 46us; 1us; 32768us; 5us; 47us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16401us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 1us; 16406us; 19us; 54us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16407us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 4us; 16442us; 14us; 60us; 20us; 141us; 21us; 57us; 23us; 63us; 11us; 16434us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 1us; 32768us; 22us; 59us; 0us; 16408us; 1us; 16438us; 42us; 133us; 1us; 32768us; 15us; 62us; 0us; 16409us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 24us; 65us; 1us; 16446us; 35us; 66us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16410us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 11us; 16430us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 1us; 32768us; 22us; 70us; 0us; 16411us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 25us; 73us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 16413us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 39us; 75us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16412us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 38us; 79us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16414us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 1us; 32768us; 42us; 82us; 1us; 32768us; 19us; 83us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 26us; 85us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 38us; 87us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 12us; 16415us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 3us; 16386us; 27us; 10us; 28us; 30us; 30us; 38us; 1us; 32768us; 32us; 91us; 11us; 16430us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 1us; 32768us; 40us; 93us; 0us; 16416us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16417us; 2us; 16418us; 9us; 118us; 10us; 117us; 2us; 16419us; 9us; 118us; 10us; 117us; 0us; 16420us; 0us; 16421us; 10us; 16422us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16423us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16424us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16425us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16426us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16427us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16428us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 10us; 16429us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 13us; 16432us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 16us; 128us; 13us; 16432us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 16us; 128us; 13us; 16436us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 18us; 131us; 13us; 16436us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 18us; 131us; 13us; 16440us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 18us; 136us; 13us; 16440us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 18us; 136us; 13us; 32768us; 1us; 119us; 2us; 121us; 3us; 120us; 4us; 122us; 5us; 123us; 6us; 124us; 7us; 125us; 8us; 126us; 9us; 118us; 10us; 117us; 11us; 115us; 12us; 116us; 24us; 146us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16431us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16433us; 0us; 16435us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16437us; 1us; 32768us; 5us; 134us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16439us; 1us; 32768us; 42us; 137us; 1us; 32768us; 5us; 138us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16441us; 2us; 16443us; 20us; 143us; 23us; 145us; 1us; 32768us; 42us; 142us; 0us; 16444us; 1us; 32768us; 42us; 144us; 0us; 16445us; 11us; 32768us; 12us; 94us; 21us; 68us; 29us; 77us; 31us; 71us; 33us; 89us; 34us; 51us; 37us; 52us; 41us; 81us; 42us; 56us; 43us; 50us; 44us; 49us; 0us; 16447us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 27us; 28us; 32us; 33us; 37us; 38us; 42us; 43us; 45us; 47us; 51us; 52us; 53us; 55us; 57us; 58us; 60us; 62us; 63us; 65us; 67us; 69us; 70us; 72us; 74us; 76us; 78us; 79us; 81us; 84us; 96us; 109us; 111us; 113us; 125us; 138us; 140us; 142us; 144us; 146us; 149us; 161us; 174us; 176us; 178us; 190us; 203us; 204us; 205us; 206us; 207us; 209us; 221us; 234us; 239us; 251us; 253us; 254us; 256us; 258us; 259us; 271us; 285us; 287us; 299us; 312us; 324us; 326us; 327us; 339us; 353us; 365us; 379us; 391us; 404us; 416us; 430us; 442us; 455us; 457us; 459us; 471us; 485us; 497us; 511us; 523us; 536us; 540us; 542us; 554us; 556us; 557us; 569us; 570us; 573us; 576us; 577us; 578us; 589us; 600us; 611us; 622us; 633us; 644us; 655us; 666us; 680us; 694us; 708us; 722us; 736us; 750us; 764us; 776us; 788us; 800us; 812us; 824us; 836us; 848us; 860us; 872us; 884us; 896us; 908us; 909us; 921us; 922us; 923us; 935us; 936us; 938us; 950us; 951us; 953us; 955us; 967us; 968us; 971us; 973us; 974us; 976us; 977us; 989us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 2us; 4us; 1us; 3us; 3us; 0us; 4us; 0us; 5us; 4us; 6us; 7us; 9us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 4us; 6us; 3us; 6us; 4us; 4us; 8us; 5us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 0us; 2us; 0us; 3us; 0us; 2us; 0us; 3us; 0us; 4us; 0us; 5us; 1us; 1us; 3us; 3us; 4us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 16390us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16431us; 65535us; 16433us; 16435us; 65535us; 16437us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 16441us; 65535us; 65535us; 16444us; 65535us; 16445us; 65535us; 16447us; |]
let _fsyacc_reductions ()  =    [| 
# 424 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 433 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "TigerParse.fsy"
                                                _1 
                   )
# 58 "TigerParse.fsy"
                 : TExp));
# 444 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TigerParse.fsy"
                                                [] 
                   )
# 62 "TigerParse.fsy"
                 : 'decs));
# 454 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyDec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TigerParse.fsy"
                                               
                                                match _2 with
                                                | []   -> (TypeDec [_1]) :: _2
                                                | h::t -> match h with
                                                          | TypeDec lst -> TypeDec (_1::lst) :: t
                                                          | _           -> (TypeDec [_1]) :: _2
                                              
                   )
# 63 "TigerParse.fsy"
                 : 'decs));
# 472 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'varDec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "TigerParse.fsy"
                                                  _1 :: _2 
                   )
# 71 "TigerParse.fsy"
                 : 'decs));
# 484 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'funDec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "TigerParse.fsy"
                                               
                                                match _2 with
                                                | []   -> (FunctionDec [_1]) :: _2
                                                | h::t -> match h with
                                                          | FunctionDec lst -> FunctionDec (_1::lst) :: t
                                                          | _               -> (FunctionDec [_1]) :: _2
                                              
                   )
# 72 "TigerParse.fsy"
                 : 'decs));
# 502 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TigerParse.fsy"
                                                {name=symbol _2; ty=_4; pos=(getStartPos parseState 1)} 
                   )
# 82 "TigerParse.fsy"
                 : 'tyDec));
# 514 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "TigerParse.fsy"
                                                NameTy (symbol _1, getStartPos parseState 1) 
                   )
# 86 "TigerParse.fsy"
                 : 'ty));
# 525 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyFields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "TigerParse.fsy"
                                                RecordTy _2 
                   )
# 88 "TigerParse.fsy"
                 : 'ty));
# 536 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "TigerParse.fsy"
                                                ArrayTy (symbol _3, getStartPos parseState 3)      
                   )
# 89 "TigerParse.fsy"
                 : 'ty));
# 547 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "TigerParse.fsy"
                                                [] 
                   )
# 93 "TigerParse.fsy"
                 : 'tyFields));
# 557 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyFieldsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "TigerParse.fsy"
                                                {name=symbol _1; escape=ref true; typ=symbol _3; pos=(getStartPos parseState 1)} :: _4 
                   )
# 95 "TigerParse.fsy"
                 : 'tyFields));
# 570 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "TigerParse.fsy"
                                                [] 
                   )
# 100 "TigerParse.fsy"
                 : 'tyFieldsCont));
# 580 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyFieldsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "TigerParse.fsy"
                                                {name=symbol _2; escape=ref true; typ=symbol _4; pos=(getStartPos parseState 2)} :: _5 
                   )
# 102 "TigerParse.fsy"
                 : 'tyFieldsCont));
# 593 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "TigerParse.fsy"
                                                VarDec {name=symbol _2; escape=ref true; typ=None; init=_4;  pos=(getEndPos parseState 2)} 
                   )
# 107 "TigerParse.fsy"
                 : 'varDec));
# 605 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TigerParse.fsy"
                                                VarDec { name=symbol _2;
                                                         escape=ref true;
                                                         typ=Some (symbol _4, getEndPos parseState 4);
                                                         init=_6; pos=(getEndPos parseState 2)} 
                   )
# 110 "TigerParse.fsy"
                 : 'varDec));
# 621 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyFields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "TigerParse.fsy"
                                                {name=symbol _2; param=_4;
                                                 result=None;
                                                 body=_7; pos=(getStartPos parseState 2)} 
                   )
# 118 "TigerParse.fsy"
                 : 'funDec));
# 636 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyFields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TigerParse.fsy"
                                                {name=symbol _2; param=_4;
                                                 result=Some (symbol _7, getStartPos parseState 7);
                                                 body=_9; pos=(getEndPos parseState 2)} 
                   )
# 123 "TigerParse.fsy"
                 : 'funDec));
# 652 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "TigerParse.fsy"
                                                IntExp _1   
                   )
# 129 "TigerParse.fsy"
                 : 'exp));
# 663 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "TigerParse.fsy"
                                                StringExp (_1, getStartPos parseState 1) 
                   )
# 130 "TigerParse.fsy"
                 : 'exp));
# 674 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "TigerParse.fsy"
                                                NilExp      
                   )
# 131 "TigerParse.fsy"
                 : 'exp));
# 684 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TigerParse.fsy"
                                                BreakExp (getStartPos parseState 1)      
                   )
# 132 "TigerParse.fsy"
                 : 'exp));
# 694 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variable)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "TigerParse.fsy"
                                                VarExp _1   
                   )
# 133 "TigerParse.fsy"
                 : 'exp));
# 705 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variable)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TigerParse.fsy"
                                                AssignExp {var=_1; exp=_3; pos=(getEndPos parseState 1)} 
                   )
# 137 "TigerParse.fsy"
                 : 'exp));
# 717 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'actualArgs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "TigerParse.fsy"
                                                CallExp {func=symbol _1; args=_3; pos=(getStartPos parseState 1)} 
                   )
# 140 "TigerParse.fsy"
                 : 'exp));
# 729 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordFields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "TigerParse.fsy"
                                                RecordExp {typ=symbol _1; fields=_3; pos=(getStartPos parseState 1)} 
                   )
# 143 "TigerParse.fsy"
                 : 'exp));
# 741 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TigerParse.fsy"
                                                ArrayExp {typ=symbol _1; size=_3; init=_6; pos=(getStartPos parseState 1)} 
                   )
# 146 "TigerParse.fsy"
                 : 'exp));
# 754 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "TigerParse.fsy"
                                                SeqExp _2 
                   )
# 149 "TigerParse.fsy"
                 : 'exp));
# 765 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "TigerParse.fsy"
                                                IfExp {test=_2; then'=_4; else'=Some _6; pos=(getEndPos parseState 1)} 
                   )
# 152 "TigerParse.fsy"
                 : 'exp));
# 778 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "TigerParse.fsy"
                                                IfExp {test=_2; then'=_4; else'=None; pos=(getEndPos parseState 1)} 
                   )
# 155 "TigerParse.fsy"
                 : 'exp));
# 790 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "TigerParse.fsy"
                                                WhileExp {test=_2; body=_4; pos=(getEndPos parseState 1)} 
                   )
# 157 "TigerParse.fsy"
                 : 'exp));
# 802 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "TigerParse.fsy"
                                                ForExp {var=symbol _2; escape=ref true; lo=_4; hi=_6; body=_8; pos=(getEndPos parseState 1)} 
                   )
# 160 "TigerParse.fsy"
                 : 'exp));
# 816 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TigerParse.fsy"
                                                LetExp {decs=_2; body=SeqExp _4; pos=(getEndPos parseState 1)} 
                   )
# 163 "TigerParse.fsy"
                 : 'exp));
# 828 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "TigerParse.fsy"
                                                OpExp {left=(IntExp 0); oper=MinusOp; right=_2; pos=(getEndPos parseState 1)} 
                   )
# 166 "TigerParse.fsy"
                 : 'exp));
# 839 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TigerParse.fsy"
                                                OpExp {left=_1; oper=PlusOp; right=_3; pos=(getEndPos parseState 1)}   
                   )
# 168 "TigerParse.fsy"
                 : 'exp));
# 851 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "TigerParse.fsy"
                                                OpExp {left=_1; oper=MinusOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 169 "TigerParse.fsy"
                 : 'exp));
# 863 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "TigerParse.fsy"
                                                OpExp {left=_1; oper=DivideOp; right=_3; pos=(getEndPos parseState 1)} 
                   )
# 170 "TigerParse.fsy"
                 : 'exp));
# 875 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "TigerParse.fsy"
                                                OpExp {left=_1; oper=TimesOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 171 "TigerParse.fsy"
                 : 'exp));
# 887 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TigerParse.fsy"
                                                OpExp {left=_1; oper=GtOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 173 "TigerParse.fsy"
                 : 'exp));
# 899 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "TigerParse.fsy"
                                                OpExp {left=_1; oper=LtOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 174 "TigerParse.fsy"
                 : 'exp));
# 911 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "TigerParse.fsy"
                                                OpExp {left=_1; oper=GeOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 175 "TigerParse.fsy"
                 : 'exp));
# 923 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "TigerParse.fsy"
                                                OpExp {left=_1; oper=LeOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 176 "TigerParse.fsy"
                 : 'exp));
# 935 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TigerParse.fsy"
                                                OpExp {left=_1; oper=EqOp; right=_3; pos=(getEndPos parseState 1)}  
                   )
# 177 "TigerParse.fsy"
                 : 'exp));
# 947 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TigerParse.fsy"
                                                OpExp {left=_1; oper=NeqOp; right=_3; pos=(getEndPos parseState 1)} 
                   )
# 178 "TigerParse.fsy"
                 : 'exp));
# 959 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "TigerParse.fsy"
                                                IfExp {test=_1; then'=_3; else'=Some (IntExp 0); pos=(getStartPos parseState 2)} 
                   )
# 180 "TigerParse.fsy"
                 : 'exp));
# 971 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "TigerParse.fsy"
                                                IfExp {test=_1; then'=(IntExp 1); else'=Some _3; pos=(getStartPos parseState 2)} 
                   )
# 181 "TigerParse.fsy"
                 : 'exp));
# 983 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "TigerParse.fsy"
                                                [] 
                   )
# 185 "TigerParse.fsy"
                 : 'expSeq));
# 993 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expSeqCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "TigerParse.fsy"
                                                (_1, getStartPos parseState 1) :: _2 
                   )
# 187 "TigerParse.fsy"
                 : 'expSeq));
# 1005 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "TigerParse.fsy"
                                                [] 
                   )
# 191 "TigerParse.fsy"
                 : 'expSeqCont));
# 1015 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expSeqCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "TigerParse.fsy"
                                                (_2, getStartPos parseState 2) :: _3 
                   )
# 193 "TigerParse.fsy"
                 : 'expSeqCont));
# 1027 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "TigerParse.fsy"
                                                [] 
                   )
# 197 "TigerParse.fsy"
                 : 'actualArgs));
# 1037 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "TigerParse.fsy"
                                                _1 :: _2 
                   )
# 198 "TigerParse.fsy"
                 : 'actualArgs));
# 1049 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "TigerParse.fsy"
                                                [] 
                   )
# 202 "TigerParse.fsy"
                 : 'argsCont));
# 1059 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "TigerParse.fsy"
                                                _2 :: _3 
                   )
# 204 "TigerParse.fsy"
                 : 'argsCont));
# 1071 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "TigerParse.fsy"
                                                [] 
                   )
# 209 "TigerParse.fsy"
                 : 'recordFields));
# 1081 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordFieldsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "TigerParse.fsy"
                                                (symbol _1, _3, (getEndPos parseState 1)) :: _4 
                   )
# 211 "TigerParse.fsy"
                 : 'recordFields));
# 1094 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "TigerParse.fsy"
                                                [] 
                   )
# 216 "TigerParse.fsy"
                 : 'recordFieldsCont));
# 1104 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'recordFieldsCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "TigerParse.fsy"
                                                (symbol _2, _4, (getEndPos parseState 2)) :: _5 
                   )
# 218 "TigerParse.fsy"
                 : 'recordFieldsCont));
# 1117 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "TigerParse.fsy"
                                                SimpleVar (symbol _1, (getEndPos parseState 1)) 
                   )
# 222 "TigerParse.fsy"
                 : 'variable));
# 1128 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableCont)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "TigerParse.fsy"
                                                _1 
                   )
# 223 "TigerParse.fsy"
                 : 'variable));
# 1139 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "TigerParse.fsy"
                                                FieldVar (SimpleVar (symbol _1, getStartPos parseState 1), symbol _3, getEndPos parseState 3) 
                   )
# 227 "TigerParse.fsy"
                 : 'variableCont));
# 1151 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableCont)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "TigerParse.fsy"
                                                FieldVar (_1, symbol _3, getEndPos parseState 3) 
                   )
# 229 "TigerParse.fsy"
                 : 'variableCont));
# 1163 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "TigerParse.fsy"
                                                SubscriptVar (SimpleVar (symbol _1, getStartPos parseState 1), _3, getEndPos parseState 3) 
                   )
# 231 "TigerParse.fsy"
                 : 'variableCont));
# 1175 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'variableCont)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TigerParse.fsy"
                                                SubscriptVar (_1, _3, getEndPos parseState 3) 
                   )
# 233 "TigerParse.fsy"
                 : 'variableCont));
|]
# 1188 "TigerParse.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : TExp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
