// Implementation file for parser generated by fsyacc
module TigerParse
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "TigerParse.fsy"


(* Parser specification for Tiger Language *)

open Absyn

// Helper functions could be defined here


# 16 "TigerParse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQ
  | NEQ
  | GT
  | GE
  | LT
  | LE
  | AND
  | OR
  | TIMES
  | DIVIDE
  | PLUS
  | MINUS
  | UMINUS
  | LBRACE
  | RBRACE
  | SEMICOLON
  | COLON
  | COMMA
  | ASSIGN
  | DOT
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | THEN
  | TO
  | TYPE
  | VAR
  | WHILE
  | FUNCTION
  | IF
  | IN
  | LET
  | NIL
  | OF
  | ARRAY
  | BREAK
  | DO
  | ELSE
  | END
  | FOR
  | ID of (string)
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_UMINUS
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_DOT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_THEN
    | TOKEN_TO
    | TOKEN_TYPE
    | TOKEN_VAR
    | TOKEN_WHILE
    | TOKEN_FUNCTION
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NIL
    | TOKEN_OF
    | TOKEN_ARRAY
    | TOKEN_BREAK
    | TOKEN_DO
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FOR
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Exp
    | NONTERM_LValue
    | NONTERM_LValueNotID
    | NONTERM_Negation
    | NONTERM_InfixOp
    | NONTERM_Assign
    | NONTERM_FunCall
    | NONTERM_ActualParams
    | NONTERM_ExpList
    | NONTERM_RecCreate
    | NONTERM_RecAggregate
    | NONTERM_FieldList
    | NONTERM_ArrCreate
    | NONTERM_SeqExp
    | NONTERM_ZeroOrMoreExp
    | NONTERM_ExpSeq
    | NONTERM_IfExp
    | NONTERM_WhileExp
    | NONTERM_ForExp
    | NONTERM_LetExp
    | NONTERM_Declarations
    | NONTERM_DecList
    | NONTERM_Dec
    | NONTERM_TyDecList
    | NONTERM_TyDec
    | NONTERM_VarDec
    | NONTERM_FunDecList
    | NONTERM_FunDec
    | NONTERM_Ty
    | NONTERM_FieldDec
    | NONTERM_TypeFieldList
    | NONTERM_Op

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQ  -> 1 
  | NEQ  -> 2 
  | GT  -> 3 
  | GE  -> 4 
  | LT  -> 5 
  | LE  -> 6 
  | AND  -> 7 
  | OR  -> 8 
  | TIMES  -> 9 
  | DIVIDE  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | UMINUS  -> 13 
  | LBRACE  -> 14 
  | RBRACE  -> 15 
  | SEMICOLON  -> 16 
  | COLON  -> 17 
  | COMMA  -> 18 
  | ASSIGN  -> 19 
  | DOT  -> 20 
  | LPAREN  -> 21 
  | RPAREN  -> 22 
  | LBRACK  -> 23 
  | RBRACK  -> 24 
  | THEN  -> 25 
  | TO  -> 26 
  | TYPE  -> 27 
  | VAR  -> 28 
  | WHILE  -> 29 
  | FUNCTION  -> 30 
  | IF  -> 31 
  | IN  -> 32 
  | LET  -> 33 
  | NIL  -> 34 
  | OF  -> 35 
  | ARRAY  -> 36 
  | BREAK  -> 37 
  | DO  -> 38 
  | ELSE  -> 39 
  | END  -> 40 
  | FOR  -> 41 
  | ID _ -> 42 
  | STRING _ -> 43 
  | INT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_NEQ 
  | 3 -> TOKEN_GT 
  | 4 -> TOKEN_GE 
  | 5 -> TOKEN_LT 
  | 6 -> TOKEN_LE 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_OR 
  | 9 -> TOKEN_TIMES 
  | 10 -> TOKEN_DIVIDE 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_UMINUS 
  | 14 -> TOKEN_LBRACE 
  | 15 -> TOKEN_RBRACE 
  | 16 -> TOKEN_SEMICOLON 
  | 17 -> TOKEN_COLON 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_ASSIGN 
  | 20 -> TOKEN_DOT 
  | 21 -> TOKEN_LPAREN 
  | 22 -> TOKEN_RPAREN 
  | 23 -> TOKEN_LBRACK 
  | 24 -> TOKEN_RBRACK 
  | 25 -> TOKEN_THEN 
  | 26 -> TOKEN_TO 
  | 27 -> TOKEN_TYPE 
  | 28 -> TOKEN_VAR 
  | 29 -> TOKEN_WHILE 
  | 30 -> TOKEN_FUNCTION 
  | 31 -> TOKEN_IF 
  | 32 -> TOKEN_IN 
  | 33 -> TOKEN_LET 
  | 34 -> TOKEN_NIL 
  | 35 -> TOKEN_OF 
  | 36 -> TOKEN_ARRAY 
  | 37 -> TOKEN_BREAK 
  | 38 -> TOKEN_DO 
  | 39 -> TOKEN_ELSE 
  | 40 -> TOKEN_END 
  | 41 -> TOKEN_FOR 
  | 42 -> TOKEN_ID 
  | 43 -> TOKEN_STRING 
  | 44 -> TOKEN_INT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Exp 
    | 3 -> NONTERM_Exp 
    | 4 -> NONTERM_Exp 
    | 5 -> NONTERM_Exp 
    | 6 -> NONTERM_Exp 
    | 7 -> NONTERM_Exp 
    | 8 -> NONTERM_Exp 
    | 9 -> NONTERM_Exp 
    | 10 -> NONTERM_Exp 
    | 11 -> NONTERM_Exp 
    | 12 -> NONTERM_Exp 
    | 13 -> NONTERM_Exp 
    | 14 -> NONTERM_Exp 
    | 15 -> NONTERM_Exp 
    | 16 -> NONTERM_Exp 
    | 17 -> NONTERM_Exp 
    | 18 -> NONTERM_LValue 
    | 19 -> NONTERM_LValue 
    | 20 -> NONTERM_LValueNotID 
    | 21 -> NONTERM_LValueNotID 
    | 22 -> NONTERM_LValueNotID 
    | 23 -> NONTERM_Negation 
    | 24 -> NONTERM_InfixOp 
    | 25 -> NONTERM_InfixOp 
    | 26 -> NONTERM_InfixOp 
    | 27 -> NONTERM_Assign 
    | 28 -> NONTERM_FunCall 
    | 29 -> NONTERM_ActualParams 
    | 30 -> NONTERM_ActualParams 
    | 31 -> NONTERM_ExpList 
    | 32 -> NONTERM_ExpList 
    | 33 -> NONTERM_RecCreate 
    | 34 -> NONTERM_RecAggregate 
    | 35 -> NONTERM_RecAggregate 
    | 36 -> NONTERM_FieldList 
    | 37 -> NONTERM_FieldList 
    | 38 -> NONTERM_ArrCreate 
    | 39 -> NONTERM_SeqExp 
    | 40 -> NONTERM_ZeroOrMoreExp 
    | 41 -> NONTERM_ZeroOrMoreExp 
    | 42 -> NONTERM_ExpSeq 
    | 43 -> NONTERM_ExpSeq 
    | 44 -> NONTERM_IfExp 
    | 45 -> NONTERM_IfExp 
    | 46 -> NONTERM_WhileExp 
    | 47 -> NONTERM_ForExp 
    | 48 -> NONTERM_LetExp 
    | 49 -> NONTERM_Declarations 
    | 50 -> NONTERM_Declarations 
    | 51 -> NONTERM_DecList 
    | 52 -> NONTERM_DecList 
    | 53 -> NONTERM_Dec 
    | 54 -> NONTERM_Dec 
    | 55 -> NONTERM_Dec 
    | 56 -> NONTERM_TyDecList 
    | 57 -> NONTERM_TyDecList 
    | 58 -> NONTERM_TyDec 
    | 59 -> NONTERM_VarDec 
    | 60 -> NONTERM_VarDec 
    | 61 -> NONTERM_FunDecList 
    | 62 -> NONTERM_FunDecList 
    | 63 -> NONTERM_FunDec 
    | 64 -> NONTERM_FunDec 
    | 65 -> NONTERM_Ty 
    | 66 -> NONTERM_Ty 
    | 67 -> NONTERM_Ty 
    | 68 -> NONTERM_FieldDec 
    | 69 -> NONTERM_FieldDec 
    | 70 -> NONTERM_TypeFieldList 
    | 71 -> NONTERM_TypeFieldList 
    | 72 -> NONTERM_Op 
    | 73 -> NONTERM_Op 
    | 74 -> NONTERM_Op 
    | 75 -> NONTERM_Op 
    | 76 -> NONTERM_Op 
    | 77 -> NONTERM_Op 
    | 78 -> NONTERM_Op 
    | 79 -> NONTERM_Op 
    | 80 -> NONTERM_Op 
    | 81 -> NONTERM_Op 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | UMINUS  -> "UMINUS" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | DOT  -> "DOT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | THEN  -> "THEN" 
  | TO  -> "TO" 
  | TYPE  -> "TYPE" 
  | VAR  -> "VAR" 
  | WHILE  -> "WHILE" 
  | FUNCTION  -> "FUNCTION" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NIL  -> "NIL" 
  | OF  -> "OF" 
  | ARRAY  -> "ARRAY" 
  | BREAK  -> "BREAK" 
  | DO  -> "DO" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FOR  -> "FOR" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | UMINUS  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 28us; 65535us; 0us; 2us; 24us; 25us; 27us; 28us; 30us; 31us; 55us; 32us; 56us; 33us; 57us; 34us; 58us; 35us; 59us; 36us; 63us; 37us; 69us; 38us; 72us; 39us; 73us; 40us; 74us; 41us; 78us; 42us; 79us; 43us; 80us; 44us; 81us; 45us; 82us; 46us; 83us; 47us; 86us; 48us; 87us; 49us; 88us; 50us; 91us; 41us; 108us; 51us; 111us; 52us; 119us; 53us; 122us; 54us; 28us; 65535us; 0us; 8us; 24us; 8us; 27us; 8us; 30us; 8us; 55us; 8us; 56us; 8us; 57us; 8us; 58us; 8us; 59us; 8us; 63us; 8us; 69us; 8us; 72us; 8us; 73us; 8us; 74us; 8us; 78us; 8us; 79us; 8us; 80us; 8us; 81us; 8us; 82us; 8us; 83us; 8us; 86us; 8us; 87us; 8us; 88us; 8us; 91us; 8us; 108us; 8us; 111us; 8us; 119us; 8us; 122us; 8us; 28us; 65535us; 0us; 21us; 24us; 21us; 27us; 21us; 30us; 21us; 55us; 21us; 56us; 21us; 57us; 21us; 58us; 21us; 59us; 21us; 63us; 21us; 69us; 21us; 72us; 21us; 73us; 21us; 74us; 21us; 78us; 21us; 79us; 21us; 80us; 21us; 81us; 21us; 82us; 21us; 83us; 21us; 86us; 21us; 87us; 21us; 88us; 21us; 91us; 21us; 108us; 21us; 111us; 21us; 119us; 21us; 122us; 21us; 28us; 65535us; 0us; 9us; 24us; 9us; 27us; 9us; 30us; 9us; 55us; 9us; 56us; 9us; 57us; 9us; 58us; 9us; 59us; 9us; 63us; 9us; 69us; 9us; 72us; 9us; 73us; 9us; 74us; 9us; 78us; 9us; 79us; 9us; 80us; 9us; 81us; 9us; 82us; 9us; 83us; 9us; 86us; 9us; 87us; 9us; 88us; 9us; 91us; 9us; 108us; 9us; 111us; 9us; 119us; 9us; 122us; 9us; 28us; 65535us; 0us; 10us; 24us; 10us; 27us; 10us; 30us; 10us; 55us; 10us; 56us; 10us; 57us; 10us; 58us; 10us; 59us; 10us; 63us; 10us; 69us; 10us; 72us; 10us; 73us; 10us; 74us; 10us; 78us; 10us; 79us; 10us; 80us; 10us; 81us; 10us; 82us; 10us; 83us; 10us; 86us; 10us; 87us; 10us; 88us; 10us; 91us; 10us; 108us; 10us; 111us; 10us; 119us; 10us; 122us; 10us; 28us; 65535us; 0us; 11us; 24us; 11us; 27us; 11us; 30us; 11us; 55us; 11us; 56us; 11us; 57us; 11us; 58us; 11us; 59us; 11us; 63us; 11us; 69us; 11us; 72us; 11us; 73us; 11us; 74us; 11us; 78us; 11us; 79us; 11us; 80us; 11us; 81us; 11us; 82us; 11us; 83us; 11us; 86us; 11us; 87us; 11us; 88us; 11us; 91us; 11us; 108us; 11us; 111us; 11us; 119us; 11us; 122us; 11us; 28us; 65535us; 0us; 12us; 24us; 12us; 27us; 12us; 30us; 12us; 55us; 12us; 56us; 12us; 57us; 12us; 58us; 12us; 59us; 12us; 63us; 12us; 69us; 12us; 72us; 12us; 73us; 12us; 74us; 12us; 78us; 12us; 79us; 12us; 80us; 12us; 81us; 12us; 82us; 12us; 83us; 12us; 86us; 12us; 87us; 12us; 88us; 12us; 91us; 12us; 108us; 12us; 111us; 12us; 119us; 12us; 122us; 12us; 1us; 65535us; 59us; 60us; 1us; 65535us; 59us; 62us; 28us; 65535us; 0us; 13us; 24us; 13us; 27us; 13us; 30us; 13us; 55us; 13us; 56us; 13us; 57us; 13us; 58us; 13us; 59us; 13us; 63us; 13us; 69us; 13us; 72us; 13us; 73us; 13us; 74us; 13us; 78us; 13us; 79us; 13us; 80us; 13us; 81us; 13us; 82us; 13us; 83us; 13us; 86us; 13us; 87us; 13us; 88us; 13us; 91us; 13us; 108us; 13us; 111us; 13us; 119us; 13us; 122us; 13us; 1us; 65535us; 64us; 65us; 1us; 65535us; 64us; 67us; 28us; 65535us; 0us; 14us; 24us; 14us; 27us; 14us; 30us; 14us; 55us; 14us; 56us; 14us; 57us; 14us; 58us; 14us; 59us; 14us; 63us; 14us; 69us; 14us; 72us; 14us; 73us; 14us; 74us; 14us; 78us; 14us; 79us; 14us; 80us; 14us; 81us; 14us; 82us; 14us; 83us; 14us; 86us; 14us; 87us; 14us; 88us; 14us; 91us; 14us; 108us; 14us; 111us; 14us; 119us; 14us; 122us; 14us; 28us; 65535us; 0us; 15us; 24us; 15us; 27us; 15us; 30us; 15us; 55us; 15us; 56us; 15us; 57us; 15us; 58us; 15us; 59us; 15us; 63us; 15us; 69us; 15us; 72us; 15us; 73us; 15us; 74us; 15us; 78us; 15us; 79us; 15us; 80us; 15us; 81us; 15us; 82us; 15us; 83us; 15us; 86us; 15us; 87us; 15us; 88us; 15us; 91us; 15us; 108us; 15us; 111us; 15us; 119us; 15us; 122us; 15us; 2us; 65535us; 74us; 75us; 91us; 92us; 2us; 65535us; 74us; 77us; 91us; 77us; 28us; 65535us; 0us; 16us; 24us; 16us; 27us; 16us; 30us; 16us; 55us; 16us; 56us; 16us; 57us; 16us; 58us; 16us; 59us; 16us; 63us; 16us; 69us; 16us; 72us; 16us; 73us; 16us; 74us; 16us; 78us; 16us; 79us; 16us; 80us; 16us; 81us; 16us; 82us; 16us; 83us; 16us; 86us; 16us; 87us; 16us; 88us; 16us; 91us; 16us; 108us; 16us; 111us; 16us; 119us; 16us; 122us; 16us; 28us; 65535us; 0us; 17us; 24us; 17us; 27us; 17us; 30us; 17us; 55us; 17us; 56us; 17us; 57us; 17us; 58us; 17us; 59us; 17us; 63us; 17us; 69us; 17us; 72us; 17us; 73us; 17us; 74us; 17us; 78us; 17us; 79us; 17us; 80us; 17us; 81us; 17us; 82us; 17us; 83us; 17us; 86us; 17us; 87us; 17us; 88us; 17us; 91us; 17us; 108us; 17us; 111us; 17us; 119us; 17us; 122us; 17us; 28us; 65535us; 0us; 18us; 24us; 18us; 27us; 18us; 30us; 18us; 55us; 18us; 56us; 18us; 57us; 18us; 58us; 18us; 59us; 18us; 63us; 18us; 69us; 18us; 72us; 18us; 73us; 18us; 74us; 18us; 78us; 18us; 79us; 18us; 80us; 18us; 81us; 18us; 82us; 18us; 83us; 18us; 86us; 18us; 87us; 18us; 88us; 18us; 91us; 18us; 108us; 18us; 111us; 18us; 119us; 18us; 122us; 18us; 28us; 65535us; 0us; 19us; 24us; 19us; 27us; 19us; 30us; 19us; 55us; 19us; 56us; 19us; 57us; 19us; 58us; 19us; 59us; 19us; 63us; 19us; 69us; 19us; 72us; 19us; 73us; 19us; 74us; 19us; 78us; 19us; 79us; 19us; 80us; 19us; 81us; 19us; 82us; 19us; 83us; 19us; 86us; 19us; 87us; 19us; 88us; 19us; 91us; 19us; 108us; 19us; 111us; 19us; 119us; 19us; 122us; 19us; 1us; 65535us; 89us; 90us; 1us; 65535us; 89us; 94us; 2us; 65535us; 89us; 95us; 94us; 96us; 2us; 65535us; 89us; 97us; 94us; 97us; 3us; 65535us; 89us; 100us; 94us; 100us; 97us; 101us; 2us; 65535us; 89us; 98us; 94us; 98us; 2us; 65535us; 89us; 99us; 94us; 99us; 3us; 65535us; 89us; 112us; 94us; 112us; 99us; 113us; 1us; 65535us; 104us; 105us; 2us; 65535us; 116us; 117us; 124us; 125us; 2us; 65535us; 116us; 130us; 124us; 130us; 27us; 65535us; 2us; 55us; 25us; 55us; 28us; 55us; 31us; 55us; 32us; 55us; 33us; 55us; 34us; 55us; 35us; 55us; 36us; 55us; 37us; 55us; 38us; 55us; 39us; 55us; 40us; 55us; 41us; 55us; 42us; 55us; 43us; 55us; 44us; 55us; 45us; 55us; 46us; 55us; 47us; 55us; 48us; 55us; 49us; 55us; 50us; 55us; 51us; 55us; 52us; 55us; 53us; 55us; 54us; 55us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 32us; 61us; 90us; 119us; 148us; 177us; 206us; 208us; 210us; 239us; 241us; 243us; 272us; 301us; 304us; 307us; 336us; 365us; 394us; 423us; 425us; 427us; 430us; 433us; 437us; 440us; 443us; 447us; 449us; 452us; 455us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 24us; 25us; 26us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 3us; 6us; 20us; 27us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 5us; 18us; 21us; 28us; 33us; 38us; 2us; 19us; 22us; 1us; 20us; 1us; 20us; 2us; 21us; 38us; 5us; 21us; 24us; 25us; 26us; 38us; 2us; 21us; 38us; 1us; 22us; 4us; 22us; 24us; 25us; 26us; 1us; 22us; 1us; 23us; 4us; 23us; 24us; 25us; 26us; 4us; 24us; 24us; 25us; 26us; 4us; 24us; 25us; 25us; 26us; 4us; 24us; 25us; 26us; 26us; 4us; 24us; 25us; 26us; 27us; 4us; 24us; 25us; 26us; 31us; 4us; 24us; 25us; 26us; 32us; 4us; 24us; 25us; 26us; 36us; 4us; 24us; 25us; 26us; 37us; 4us; 24us; 25us; 26us; 38us; 4us; 24us; 25us; 26us; 42us; 4us; 24us; 25us; 26us; 43us; 5us; 24us; 25us; 26us; 44us; 45us; 5us; 24us; 25us; 26us; 44us; 45us; 4us; 24us; 25us; 26us; 45us; 4us; 24us; 25us; 26us; 46us; 4us; 24us; 25us; 26us; 46us; 4us; 24us; 25us; 26us; 47us; 4us; 24us; 25us; 26us; 47us; 4us; 24us; 25us; 26us; 47us; 4us; 24us; 25us; 26us; 59us; 4us; 24us; 25us; 26us; 60us; 4us; 24us; 25us; 26us; 63us; 4us; 24us; 25us; 26us; 64us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 2us; 30us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 35us; 37us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 2us; 41us; 43us; 1us; 43us; 2us; 44us; 45us; 2us; 44us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 48us; 2us; 50us; 52us; 1us; 51us; 1us; 52us; 2us; 53us; 57us; 1us; 54us; 2us; 55us; 62us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 2us; 59us; 60us; 2us; 59us; 60us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 62us; 2us; 63us; 64us; 2us; 63us; 64us; 2us; 63us; 64us; 2us; 63us; 64us; 2us; 63us; 64us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 67us; 2us; 69us; 71us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 15us; 17us; 19us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 51us; 54us; 56us; 58us; 61us; 67us; 70us; 72us; 77us; 79us; 81us; 86us; 91us; 96us; 101us; 106us; 111us; 116us; 121us; 126us; 131us; 136us; 141us; 147us; 153us; 158us; 163us; 168us; 173us; 178us; 183us; 188us; 193us; 198us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 220us; 222us; 224us; 226us; 228us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 252us; 254us; 257us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 289us; 291us; 293us; 296us; 298us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 316us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 334us; 337us; 340us; 343us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 371us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; |]
let _fsyacc_action_rows = 148
let _fsyacc_actionTableElements = [|11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 0us; 49152us; 13us; 32768us; 0us; 3us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 2us; 16390us; 19us; 58us; 20us; 22us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 3us; 16402us; 14us; 64us; 21us; 59us; 23us; 24us; 1us; 16403us; 23us; 27us; 1us; 32768us; 42us; 23us; 0us; 16404us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 24us; 26us; 1us; 16405us; 35us; 73us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 24us; 29us; 0us; 16406us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 0us; 16407us; 12us; 16408us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 10us; 16409us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 11us; 16410us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16411us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16415us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16416us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16420us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16421us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16422us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16426us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16427us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 25us; 80us; 13us; 16428us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 39us; 81us; 12us; 16429us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 38us; 83us; 12us; 16430us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 26us; 87us; 13us; 32768us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 38us; 88us; 12us; 16431us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16443us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16444us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16447us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 12us; 16448us; 1us; 142us; 2us; 143us; 3us; 144us; 4us; 145us; 5us; 146us; 6us; 147us; 7us; 56us; 8us; 57us; 9us; 140us; 10us; 141us; 11us; 138us; 12us; 139us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 16413us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 22us; 61us; 0us; 16412us; 1us; 16414us; 18us; 63us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 16418us; 42us; 68us; 1us; 32768us; 15us; 66us; 0us; 16417us; 1us; 16419us; 18us; 70us; 1us; 32768us; 1us; 69us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 42us; 71us; 1us; 32768us; 1us; 72us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 16424us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 22us; 76us; 0us; 16423us; 1us; 16425us; 16us; 78us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 42us; 85us; 1us; 32768us; 19us; 86us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 3us; 16433us; 27us; 102us; 28us; 106us; 30us; 114us; 1us; 32768us; 32us; 91us; 11us; 16424us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 40us; 93us; 0us; 16432us; 3us; 16434us; 27us; 102us; 28us; 106us; 30us; 114us; 0us; 16435us; 0us; 16436us; 1us; 16437us; 27us; 102us; 0us; 16438us; 1us; 16439us; 30us; 114us; 0us; 16440us; 0us; 16441us; 1us; 32768us; 42us; 103us; 1us; 32768us; 1us; 104us; 3us; 32768us; 14us; 124us; 36us; 127us; 42us; 123us; 0us; 16442us; 1us; 32768us; 42us; 107us; 2us; 32768us; 17us; 109us; 19us; 108us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 42us; 110us; 1us; 32768us; 19us; 111us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 0us; 16445us; 0us; 16446us; 1us; 32768us; 42us; 115us; 1us; 32768us; 21us; 116us; 1us; 16452us; 42us; 131us; 1us; 32768us; 22us; 118us; 2us; 32768us; 1us; 119us; 17us; 120us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 1us; 32768us; 42us; 121us; 1us; 32768us; 1us; 122us; 11us; 32768us; 12us; 30us; 21us; 74us; 29us; 82us; 31us; 79us; 33us; 89us; 34us; 6us; 37us; 7us; 41us; 84us; 42us; 20us; 43us; 5us; 44us; 4us; 0us; 16449us; 1us; 16452us; 42us; 131us; 1us; 32768us; 15us; 126us; 0us; 16450us; 1us; 32768us; 35us; 128us; 1us; 32768us; 42us; 129us; 0us; 16451us; 1us; 16453us; 18us; 134us; 1us; 32768us; 17us; 132us; 1us; 32768us; 42us; 133us; 0us; 16454us; 1us; 32768us; 42us; 135us; 1us; 32768us; 17us; 136us; 1us; 32768us; 42us; 137us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; 0us; 16464us; 0us; 16465us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 27us; 28us; 29us; 30us; 31us; 32us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 50us; 52us; 54us; 55us; 67us; 81us; 83us; 95us; 109us; 110us; 122us; 123us; 136us; 147us; 159us; 172us; 185us; 198us; 211us; 224us; 237us; 250us; 263us; 277us; 291us; 304us; 318us; 331us; 345us; 359us; 372us; 385us; 398us; 411us; 424us; 436us; 448us; 460us; 472us; 484us; 486us; 487us; 489us; 501us; 503us; 505us; 506us; 508us; 510us; 522us; 524us; 526us; 538us; 550us; 562us; 564us; 565us; 567us; 579us; 591us; 603us; 615us; 627us; 639us; 641us; 643us; 655us; 667us; 679us; 683us; 685us; 697us; 699us; 700us; 704us; 705us; 706us; 708us; 709us; 711us; 712us; 713us; 715us; 717us; 721us; 722us; 724us; 727us; 739us; 741us; 743us; 755us; 756us; 757us; 759us; 761us; 763us; 765us; 768us; 780us; 782us; 784us; 796us; 797us; 799us; 801us; 802us; 804us; 806us; 807us; 809us; 811us; 813us; 814us; 816us; 818us; 820us; 821us; 822us; 823us; 824us; 825us; 826us; 827us; 828us; 829us; 830us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 4us; 4us; 2us; 3us; 3us; 3us; 3us; 4us; 0us; 1us; 1us; 3us; 4us; 0us; 1us; 3us; 5us; 6us; 3us; 0us; 1us; 1us; 3us; 4us; 6us; 4us; 8us; 5us; 0us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 2us; 4us; 4us; 6us; 1us; 2us; 7us; 9us; 1us; 3us; 3us; 0us; 1us; 3us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 6us; 6us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; 25us; 25us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 30us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; 33us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 65535us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 16435us; 16436us; 65535us; 16438us; 65535us; 16440us; 16441us; 65535us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 16446us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 16450us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16454us; 65535us; 65535us; 65535us; 16455us; 16456us; 16457us; 16458us; 16459us; 16460us; 16461us; 16462us; 16463us; 16464us; 16465us; |]
let _fsyacc_reductions ()  =    [| 
# 449 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.TExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 458 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "TigerParse.fsy"
                                              _1 
                   )
# 50 "TigerParse.fsy"
                 : Absyn.TExp));
# 469 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "TigerParse.fsy"
                                              IntExp _1    
                   )
# 54 "TigerParse.fsy"
                 : 'Exp));
# 480 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "TigerParse.fsy"
                                              StringExp _1 
                   )
# 55 "TigerParse.fsy"
                 : 'Exp));
# 491 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "TigerParse.fsy"
                                              NilExp       
                   )
# 56 "TigerParse.fsy"
                 : 'Exp));
# 501 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "TigerParse.fsy"
                                              BreakExp     
                   )
# 57 "TigerParse.fsy"
                 : 'Exp));
# 511 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "TigerParse.fsy"
                                              VarExp _1 
                   )
# 61 "TigerParse.fsy"
                 : 'Exp));
# 522 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Negation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "TigerParse.fsy"
                                              _1 
                   )
# 62 "TigerParse.fsy"
                 : 'Exp));
# 533 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'InfixOp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "TigerParse.fsy"
                                              _1 
                   )
# 63 "TigerParse.fsy"
                 : 'Exp));
# 544 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Assign)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "TigerParse.fsy"
                                              _1 
                   )
# 64 "TigerParse.fsy"
                 : 'Exp));
# 555 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunCall)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "TigerParse.fsy"
                                              _1 
                   )
# 65 "TigerParse.fsy"
                 : 'Exp));
# 566 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RecCreate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "TigerParse.fsy"
                                              _1 
                   )
# 66 "TigerParse.fsy"
                 : 'Exp));
# 577 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArrCreate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "TigerParse.fsy"
                                              _1 
                   )
# 67 "TigerParse.fsy"
                 : 'Exp));
# 588 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SeqExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "TigerParse.fsy"
                                              _1 
                   )
# 68 "TigerParse.fsy"
                 : 'Exp));
# 599 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "TigerParse.fsy"
                                              _1 
                   )
# 69 "TigerParse.fsy"
                 : 'Exp));
# 610 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'WhileExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "TigerParse.fsy"
                                              _1 
                   )
# 70 "TigerParse.fsy"
                 : 'Exp));
# 621 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ForExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "TigerParse.fsy"
                                              _1 
                   )
# 71 "TigerParse.fsy"
                 : 'Exp));
# 632 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LetExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "TigerParse.fsy"
                                              _1 
                   )
# 72 "TigerParse.fsy"
                 : 'Exp));
# 643 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "TigerParse.fsy"
                                              SimpleVar _1 
                   )
# 76 "TigerParse.fsy"
                 : 'LValue));
# 654 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LValueNotID)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "TigerParse.fsy"
                                              _1           
                   )
# 77 "TigerParse.fsy"
                 : 'LValue));
# 665 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LValue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "TigerParse.fsy"
                                                              FieldVar (_1, _3)     
                   )
# 80 "TigerParse.fsy"
                 : 'LValueNotID));
# 677 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "TigerParse.fsy"
                                                              SubscriptVar (SimpleVar _1, _3) 
                   )
# 81 "TigerParse.fsy"
                 : 'LValueNotID));
# 689 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LValueNotID)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "TigerParse.fsy"
                                                              SubscriptVar (_1, _3) 
                   )
# 82 "TigerParse.fsy"
                 : 'LValueNotID));
# 701 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "TigerParse.fsy"
                                                         OpExp {left=(IntExp 0); oper=MinusOp; right=_2} 
                   )
# 87 "TigerParse.fsy"
                 : 'Negation));
# 712 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "TigerParse.fsy"
                                                         OpExp {left=_1; oper=_2; right=_3} 
                   )
# 91 "TigerParse.fsy"
                 : 'InfixOp));
# 725 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "TigerParse.fsy"
                                                         IfExp {test=_1; then'=_3; else'=(Some (IntExp 0))} 
                   )
# 93 "TigerParse.fsy"
                 : 'InfixOp));
# 737 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "TigerParse.fsy"
                                                         IfExp {test=_1; then'=(IntExp 1); else'=(Some _3)} 
                   )
# 94 "TigerParse.fsy"
                 : 'InfixOp));
# 749 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LValue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "TigerParse.fsy"
                                                         AssignExp {var=_1; exp=_3} 
                   )
# 98 "TigerParse.fsy"
                 : 'Assign));
# 761 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ActualParams)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "TigerParse.fsy"
                                                              CallExp {func=_1; args=_3} 
                   )
# 102 "TigerParse.fsy"
                 : 'FunCall));
# 773 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "TigerParse.fsy"
                                                  [] 
                   )
# 106 "TigerParse.fsy"
                 : 'ActualParams));
# 783 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "TigerParse.fsy"
                                                  _1 
                   )
# 107 "TigerParse.fsy"
                 : 'ActualParams));
# 794 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "TigerParse.fsy"
                                                  [_1] 
                   )
# 110 "TigerParse.fsy"
                 : 'ExpList));
# 805 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "TigerParse.fsy"
                                                  List.append _1 [_3] 
                   )
# 111 "TigerParse.fsy"
                 : 'ExpList));
# 817 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'RecAggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "TigerParse.fsy"
                                                             RecordExp {typ=_1; fields=_3} 
                   )
# 114 "TigerParse.fsy"
                 : 'RecCreate));
# 829 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "TigerParse.fsy"
                                                  [] 
                   )
# 118 "TigerParse.fsy"
                 : 'RecAggregate));
# 839 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FieldList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "TigerParse.fsy"
                                                  _1 
                   )
# 119 "TigerParse.fsy"
                 : 'RecAggregate));
# 850 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "TigerParse.fsy"
                                                             [(_1, _3)] 
                   )
# 123 "TigerParse.fsy"
                 : 'FieldList));
# 862 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FieldList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "TigerParse.fsy"
                                                             List.append _1 [(_3, _5)] 
                   )
# 124 "TigerParse.fsy"
                 : 'FieldList));
# 875 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "TigerParse.fsy"
                                                             ArrayExp {typ=_1; size=_3; init=_6} 
                   )
# 128 "TigerParse.fsy"
                 : 'ArrCreate));
# 888 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ZeroOrMoreExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "TigerParse.fsy"
                                                             _2 
                   )
# 132 "TigerParse.fsy"
                 : 'SeqExp));
# 899 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "TigerParse.fsy"
                                                             NilExp    
                   )
# 136 "TigerParse.fsy"
                 : 'ZeroOrMoreExp));
# 909 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "TigerParse.fsy"
                                                            
                                                             if (List.length _1) =1
                                                                 then _1.[0]
                                                                 else SeqExp _1
                                                           
                   )
# 137 "TigerParse.fsy"
                 : 'ZeroOrMoreExp));
# 924 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "TigerParse.fsy"
                                                             [_1] 
                   )
# 145 "TigerParse.fsy"
                 : 'ExpSeq));
# 935 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "TigerParse.fsy"
                                                             List.append _1 [_3] 
                   )
# 146 "TigerParse.fsy"
                 : 'ExpSeq));
# 947 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "TigerParse.fsy"
                                                             IfExp {test=_2; then'=_4; else'=None}    
                   )
# 150 "TigerParse.fsy"
                 : 'IfExp));
# 959 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "TigerParse.fsy"
                                                             IfExp {test=_2; then'=_4; else'=(Some _6)} 
                   )
# 151 "TigerParse.fsy"
                 : 'IfExp));
# 972 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "TigerParse.fsy"
                                                             WhileExp {test=_2; body=_4} 
                   )
# 155 "TigerParse.fsy"
                 : 'WhileExp));
# 984 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "TigerParse.fsy"
                                                             ForExp {var=_2; escape=ref true; lo=_4; hi=_6; body=_8} 
                   )
# 159 "TigerParse.fsy"
                 : 'ForExp));
# 998 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Declarations)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ZeroOrMoreExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "TigerParse.fsy"
                                                                     LetExp {decs=_2; body=_4} 
                   )
# 163 "TigerParse.fsy"
                 : 'LetExp));
# 1010 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "TigerParse.fsy"
                                                  [] 
                   )
# 167 "TigerParse.fsy"
                 : 'Declarations));
# 1020 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DecList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "TigerParse.fsy"
                                                  _1 
                   )
# 168 "TigerParse.fsy"
                 : 'Declarations));
# 1031 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "TigerParse.fsy"
                                                  [_1] 
                   )
# 172 "TigerParse.fsy"
                 : 'DecList));
# 1042 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DecList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "TigerParse.fsy"
                                                  List.append _1 [_2] 
                   )
# 173 "TigerParse.fsy"
                 : 'DecList));
# 1054 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TyDecList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "TigerParse.fsy"
                                                  TypeDec _1 
                   )
# 177 "TigerParse.fsy"
                 : 'Dec));
# 1065 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'VarDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "TigerParse.fsy"
                                                  _1 
                   )
# 178 "TigerParse.fsy"
                 : 'Dec));
# 1076 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDecList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "TigerParse.fsy"
                                                  FunctionDec _1 
                   )
# 179 "TigerParse.fsy"
                 : 'Dec));
# 1087 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TyDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "TigerParse.fsy"
                                                  [_1] 
                   )
# 185 "TigerParse.fsy"
                 : 'TyDecList));
# 1098 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TyDecList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TyDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "TigerParse.fsy"
                                                  List.append _1 [_2] 
                   )
# 186 "TigerParse.fsy"
                 : 'TyDecList));
# 1110 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "TigerParse.fsy"
                                                  {name=_2; ty=_4} 
                   )
# 190 "TigerParse.fsy"
                 : 'TyDec));
# 1122 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "TigerParse.fsy"
                                                             VarDec {name=_2; escape=ref true; typ=None; init=_4} 
                   )
# 194 "TigerParse.fsy"
                 : 'VarDec));
# 1134 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "TigerParse.fsy"
                                                             VarDec {name=_2; escape=ref true; typ=(Some _4); init=_6} 
                   )
# 195 "TigerParse.fsy"
                 : 'VarDec));
# 1147 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "TigerParse.fsy"
                                                   [_1] 
                   )
# 199 "TigerParse.fsy"
                 : 'FunDecList));
# 1158 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDecList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'FunDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "TigerParse.fsy"
                                                   List.append _1 [_2] 
                   )
# 200 "TigerParse.fsy"
                 : 'FunDecList));
# 1170 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'FieldDec)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "TigerParse.fsy"
                                                                                  {name=_2; param=_4; result=None; body=_7} 
                   )
# 204 "TigerParse.fsy"
                 : 'FunDec));
# 1183 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'FieldDec)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "TigerParse.fsy"
                                                                                  {name=_2; param=_4; result=(Some _7); body=_9} 
                   )
# 205 "TigerParse.fsy"
                 : 'FunDec));
# 1197 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "TigerParse.fsy"
                                                             NameTy _1   
                   )
# 211 "TigerParse.fsy"
                 : 'Ty));
# 1208 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'FieldDec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "TigerParse.fsy"
                                                             RecordTy _2 
                   )
# 212 "TigerParse.fsy"
                 : 'Ty));
# 1219 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "TigerParse.fsy"
                                                             ArrayTy _3  
                   )
# 213 "TigerParse.fsy"
                 : 'Ty));
# 1230 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "TigerParse.fsy"
                                                  [] 
                   )
# 217 "TigerParse.fsy"
                 : 'FieldDec));
# 1240 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFieldList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "TigerParse.fsy"
                                                  _1 
                   )
# 218 "TigerParse.fsy"
                 : 'FieldDec));
# 1251 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "TigerParse.fsy"
                                                                  [{name=_1; escape=ref true; typ=_3}] 
                   )
# 222 "TigerParse.fsy"
                 : 'TypeFieldList));
# 1263 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeFieldList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "TigerParse.fsy"
                                                                  List.append _1 [{name=_3; escape=ref true; typ=_5}]
                   )
# 223 "TigerParse.fsy"
                 : 'TypeFieldList));
# 1276 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "TigerParse.fsy"
                                                  PlusOp   
                   )
# 227 "TigerParse.fsy"
                 : 'Op));
# 1286 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "TigerParse.fsy"
                                                  MinusOp  
                   )
# 228 "TigerParse.fsy"
                 : 'Op));
# 1296 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "TigerParse.fsy"
                                                  TimesOp  
                   )
# 229 "TigerParse.fsy"
                 : 'Op));
# 1306 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "TigerParse.fsy"
                                                  DivideOp 
                   )
# 230 "TigerParse.fsy"
                 : 'Op));
# 1316 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "TigerParse.fsy"
                                                  EqOp     
                   )
# 231 "TigerParse.fsy"
                 : 'Op));
# 1326 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "TigerParse.fsy"
                                                  NeqOp    
                   )
# 232 "TigerParse.fsy"
                 : 'Op));
# 1336 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "TigerParse.fsy"
                                                  GtOp     
                   )
# 233 "TigerParse.fsy"
                 : 'Op));
# 1346 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "TigerParse.fsy"
                                                  GeOp     
                   )
# 234 "TigerParse.fsy"
                 : 'Op));
# 1356 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "TigerParse.fsy"
                                                  LtOp     
                   )
# 235 "TigerParse.fsy"
                 : 'Op));
# 1366 "TigerParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "TigerParse.fsy"
                                                  LeOp     
                   )
# 236 "TigerParse.fsy"
                 : 'Op));
|]
# 1377 "TigerParse.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.TExp =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
