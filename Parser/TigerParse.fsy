%{

(* Parser specification for Tiger Language *)

open Microsoft.FSharp.Text.Parsing

open Absyn
open Store

let getStartPos (parseState: IParseState) lexIdx =
    let pos = parseState.InputStartPosition lexIdx
    (pos.Line + 1, pos.Column)

let getEndPos (parseState: IParseState) lexIdx =
    let pos = parseState.InputEndPosition lexIdx
    (pos.Line + 1, pos.Column)

%}

%token <int> INT
%token <string> STRING
%token <string> ID

%token ARRAY BREAK DO ELSE END FOR
%token FUNCTION IF IN LET NIL OF
%token THEN TO TYPE VAR WHILE

%token ASSIGN DOT LPAREN RPAREN LBRACK RBRACK
%token LBRACE RBRACE SEMICOLON COLON COMMA

%token AND OR TIMES DIVIDE PLUS MINUS UMINUS
%token GT GE LT LE EQ NEQ

%token EOF

/* Precedence */

%right OF
%nonassoc DO THEN
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc GT GE LT LE EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

/* Start symbol and its type */

%start Main
%type <TExp> Main

%%

/* A Tiger program is a single expression */

Main:
    exp EOF              { $1 }
;

decs:
    | /* empty */        { [] }
    | tyDec decs         {
                           match $2 with
                           | []   -> (TypeDec [$1]) :: $2
                           | h::t -> match h with
                                     | TypeDec lst -> TypeDec ($1::lst) :: t
                                     | _           -> (TypeDec [$1]) :: $2
                         }

    | varDec decs        { $1 :: $2 }
    | funDec decs        {
                           match $2 with
                           | []   -> (FunctionDec [$1]) :: $2
                           | h::t -> match h with
                                     | FunctionDec lst -> FunctionDec ($1::lst) :: t
                                     | _               -> (FunctionDec [$1]) :: $2
                         }
;

tyDec:
     TYPE ID EQ ty       { {name=symbol $2; ty=$4; pos=(getStartPos parseState 1)} }
;

ty:
  | ID                   { NameTy (symbol $1, getStartPos parseState 1) }
  | LBRACE tyFields RBRACE
                         { RecordTy $2 }
  | ARRAY OF ID          { ArrayTy (symbol $3, getStartPos parseState 3)      }
;

tyFields:
        | /* empty */    { [] }
        | ID COLON ID tyFieldsCont
                         { {name=symbol $1; escape=ref true; typ=symbol $3; pos=(getStartPos parseState 1)} :: $4 }
;

tyFieldsCont:
            | /* empty */
                         { [] }
            | COMMA ID COLON ID tyFieldsCont
                         { {name=symbol $2; escape=ref true; typ=symbol $4; pos=(getStartPos parseState 2)} :: $5 }
;

varDec:
      | VAR ID ASSIGN exp
                         { VarDec {name=symbol $2; escape=ref true; typ=None; init=$4;  pos=(getEndPos parseState 2)} }

      | VAR ID COLON ID ASSIGN exp
                         { VarDec { name=symbol $2;
                                    escape=ref true;
                                    typ=Some (symbol $4, getEndPos parseState 4);
                                    init=$6; pos=(getEndPos parseState 2)} }
;

funDec:
      | FUNCTION ID LPAREN tyFields RPAREN EQ exp
                         { {name=symbol $2; param=$4;
                            result=None;
                            body=$7; pos=(getStartPos parseState 2)} }

      | FUNCTION ID LPAREN tyFields RPAREN COLON ID EQ exp
                         { {name=symbol $2; param=$4;
                            result=Some (symbol $7, getStartPos parseState 7);
                            body=$9; pos=(getEndPos parseState 2)} }
;

exp:
   | INT                 { IntExp $1   }
   | STRING              { StringExp ($1, getStartPos parseState 1) }
   | NIL                 { NilExp      }
   | BREAK               { BreakExp (getStartPos parseState 1)      }
   | variable            { VarExp $1   }


   | variable ASSIGN exp
                         { AssignExp {var=$1; exp=$3; pos=(getEndPos parseState 1)} }

   | ID LPAREN actualArgs RPAREN
                         { CallExp {func=symbol $1; args=$3; pos=(getStartPos parseState 1)} }

   | ID LBRACE recordFields RBRACE
                         { RecordExp {typ=symbol $1; fields=$3; pos=(getStartPos parseState 1)} }

   | ID LBRACK exp RBRACK OF exp
                         { ArrayExp {typ=symbol $1; size=$3; init=$6; pos=(getStartPos parseState 1)} }

   | LPAREN expSeq RPAREN
                         { SeqExp $2 }

   | IF exp THEN exp ELSE exp
                         { IfExp {test=$2; then'=$4; else'=Some $6; pos=(getEndPos parseState 1)} }

   | IF exp THEN exp %prec DO
                         { IfExp {test=$2; then'=$4; else'=None; pos=(getEndPos parseState 1)} }

   | WHILE exp DO exp    { WhileExp {test=$2; body=$4; pos=(getEndPos parseState 1)} }

   | FOR ID ASSIGN exp TO exp DO exp
                         { ForExp {var=symbol $2; escape=ref true; lo=$4; hi=$6; body=$8; pos=(getEndPos parseState 1)} }

   | LET decs IN expSeq END
                         { LetExp {decs=$2; body=SeqExp $4; pos=(getEndPos parseState 1)} }

   | MINUS exp %prec UMINUS
                         { OpExp {left=(IntExp 0); oper=MinusOp; right=$2; pos=(getEndPos parseState 1)} }

   | exp PLUS exp        { OpExp {left=$1; oper=PlusOp; right=$3; pos=(getEndPos parseState 1)}   }
   | exp MINUS exp       { OpExp {left=$1; oper=MinusOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp DIVIDE exp      { OpExp {left=$1; oper=DivideOp; right=$3; pos=(getEndPos parseState 1)} }
   | exp TIMES exp       { OpExp {left=$1; oper=TimesOp; right=$3; pos=(getEndPos parseState 1)}  }

   | exp GT exp          { OpExp {left=$1; oper=GtOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp LT exp          { OpExp {left=$1; oper=LtOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp GE exp          { OpExp {left=$1; oper=GeOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp LE exp          { OpExp {left=$1; oper=LeOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp EQ exp          { OpExp {left=$1; oper=EqOp; right=$3; pos=(getEndPos parseState 1)}  }
   | exp NEQ exp         { OpExp {left=$1; oper=NeqOp; right=$3; pos=(getEndPos parseState 1)} }

   | exp AND exp         { IfExp {test=$1; then'=$3; else'=Some (IntExp 0); pos=(getStartPos parseState 2)} }
   | exp OR exp          { IfExp {test=$1; then'=(IntExp 1); else'=Some $3; pos=(getStartPos parseState 2)} }
;

expSeq:
      | /* unit, () */   { [] }
      | exp expSeqCont
                         { ($1, getStartPos parseState 1) :: $2 }
;

expSeqCont:
          | /* empty */  { [] }
          | SEMICOLON exp expSeqCont
                         { ($2, getStartPos parseState 2) :: $3 }
;

actualArgs:
          | /* empty */  { [] }
          | exp argsCont { $1 :: $2 }
;

argsCont:
        | /* empty */    { [] }
        | COMMA exp argsCont
                         { $2 :: $3 }
;

recordFields:
            | /* empty */
                         { [] }
            | ID EQ exp recordFieldsCont
                         { (symbol $1, $3, (getEndPos parseState 1)) :: $4 }
;

recordFieldsCont:
                | /* empty */
                         { [] }
                | COMMA ID EQ exp recordFieldsCont
                         { (symbol $2, $4, (getEndPos parseState 2)) :: $5 }
;

variable:
        | ID             { SimpleVar (symbol $1, (getEndPos parseState 1)) }
        | variableCont   { $1 }
;

variableCont:
            | ID DOT ID  { FieldVar (SimpleVar (symbol $1, getStartPos parseState 1), symbol $3, getEndPos parseState 3) }
            | variableCont DOT ID
                         { FieldVar ($1, symbol $3, getEndPos parseState 3) }
            | ID LBRACK exp RBRACK
                         { SubscriptVar (SimpleVar (symbol $1, getStartPos parseState 1), $3, getEndPos parseState 3) }
            | variableCont LBRACK exp RBRACK
                         { SubscriptVar ($1, $3, getEndPos parseState 3) }
;
