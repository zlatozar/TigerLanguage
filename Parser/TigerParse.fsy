%{

(* Parser specification for Tiger Language *)

open Absyn

// Helper functions could be defined here

%}

%token <int> INT
%token <string> STRING
%token <string> ID

%token ARRAY BREAK DO ELSE END FOR
%token FUNCTION IF IN LET NIL OF
%token THEN TO TYPE VAR WHILE

%token ASSIGN DOT LPAREN RPAREN LBRACK RBRACK
%token LBRACE RBRACE SEMICOLON COLON COMMA

%token AND OR TIMES DIVIDE PLUS MINUS UMINUS
%token EQ NEQ GT GE LT LE

%token EOF

/* Precedence */

%right SEMICOLON
%left THEN
%left DO OF ELSE
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT GE LT LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

/* Start symbol and its type */

%start Main
%type <Absyn.TExp> Main

%%

/* A Tiger program is a single Exp */

Main:
    Exp EOF            { $1 }
;

Exp:
    | INT              { IntExp $1    }
    | STRING           { StringExp $1 }
    | NIL              { NilExp       }
    | BREAK            { BreakExp     }

/* Non terminals as place holders */

    | LValue           { VarExp $1 }
    | Negation         { $1 }
    | InfixOp          { $1 }
    | Assign           { $1 }
    | FunCall          { $1 }
    | RecCreate        { $1 }
    | ArrCreate        { $1 }
    | SeqExp           { $1 }
    | IfExp            { $1 }
    | WhileExp         { $1 }
    | ForExp           { $1 }
    | LetExp           { $1 }
;

LValue:
    | ID               { SimpleVar $1 }
    | LValueNotID      { $1           }

LValueNotID:
    | LValue DOT ID                    { FieldVar ($1, $3)     }
    | ID LBRACK Exp RBRACK             { SubscriptVar (SimpleVar $1, $3) }
    | LValueNotID LBRACK Exp RBRACK    { SubscriptVar ($1, $3) }
;

/* In p. 99 is suggested negative numbers to be infix operation '0 - exp' */
Negation:
    | MINUS Exp %prec UMINUS      { OpExp {left=(IntExp 0); oper=MinusOp; right=$2} }
;

InfixOp:
    | Exp Op Exp                  { OpExp {left=$1; oper=$2; right=$3} }
/* See again p. 99 */
    | Exp AND Exp                 { IfExp {test=$1; then'=$3; else'=(Some (IntExp 0))} }
    | Exp OR Exp                  { IfExp {test=$1; then'=(IntExp 1); else'=(Some $3)} }
;

Assign:
    | LValue ASSIGN Exp           { AssignExp {var=$1; exp=$3} }
;

FunCall:
    | ID LPAREN ActualParams RPAREN    { CallExp {func=$1; args=$3} }
;

ActualParams:
    | /* empty */          { [] }
    | ExpList              { $1 }

ExpList:
    | Exp                  { [$1] }
    | ExpList COMMA Exp    { List.append $1 [$3] }

RecCreate:
    | ID LBRACE RecAggregate RBRACE   { RecordExp {typ=$1; fields=$3} }
;

RecAggregate:
    | /* empty */          { [] }
    | FieldList            { $1 }
;

FieldList:
    | ID EQ Exp                       { [($1, $3)] }
    | FieldList COMMA ID EQ Exp       { List.append $1 [($3, $5)] }
;

ArrCreate:
    | ID LBRACK Exp RBRACK OF Exp     { ArrayExp {typ=$1; size=$3; init=$6} }
;

SeqExp:
    | LPAREN ZeroOrMoreExp RPAREN     { $2 }
;

ZeroOrMoreExp:
    | /* empty */                     { NilExp    }
    | ExpSeq                          {
                                        if (List.length $1) =1
                                            then $1.[0]
                                            else SeqExp $1
                                      }
;

ExpSeq:
    | Exp                             { [$1] }
    | ExpSeq SEMICOLON Exp            { List.append $1 [$3] }
;

IfExp:
    | IF Exp THEN Exp                 { IfExp {test=$2; then'=$4; else'=None}    }
    | IF Exp THEN Exp ELSE Exp        { IfExp {test=$2; then'=$4; else'=(Some $6)} }
;

WhileExp:
    | WHILE Exp DO Exp                { WhileExp {test=$2; body=$4} }
;

ForExp:
    | FOR ID ASSIGN Exp TO Exp DO Exp { ForExp {var=$2; escape=ref true; lo=$4; hi=$6; body=$8} }
;

LetExp:
    | LET Declarations IN ZeroOrMoreExp END   { LetExp {decs=$2; body=$4} }
;

Declarations:
    | /* empty */          { [] }
    | DecList              { $1 }
;

DecList:
    | Dec                  { [$1] }
    | DecList Dec          { List.append $1 [$2] }
;

Dec:
    | TyDec                { $1 }
    | VarDec               { $1 }
    | FunDec               { $1 }
;

TyDec:
    | TYPE ID EQ Ty        { TypeDec [{name=$2; ty=$4}] }
;

VarDec:
    | VAR ID ASSIGN Exp               { VarDec {name=$2; escape=ref true; typ=None; init=$4} }
    | VAR ID COLON ID ASSIGN Exp      { VarDec {name=$2; escape=ref true; typ=(Some $4); init=$6} }
;

FunDec:
    | FUNCTION ID LPAREN FieldDec RPAREN EQ Exp            { FunctionDec [{name=$2; param=$4; result=None; body=$7}] }
    | FUNCTION ID LPAREN FieldDec RPAREN COLON ID EQ Exp   { FunctionDec [{name=$2; param=$4; result=(Some $7); body=$9}] }
;

/* Data types */

Ty:
    | ID                              { NameTy $1   }
    | LBRACE FieldDec RBRACE          { RecordTy $2 }
    | ARRAY OF ID                     { ArrayTy $3  }
;

FieldDec:
    | /* empty */          { [] }
    | TypeFieldList        { $1 }
;

TypeFieldList:
    | ID COLON ID                          { [{name=$1; escape=ref true; typ=$3}] }
    | TypeFieldList COMMA ID COLON ID      { List.append $1 [{name=$3; escape=ref true; typ=$5}]}
;

Op:
    | PLUS                 { PlusOp   }
    | MINUS                { MinusOp  }
    | TIMES                { TimesOp  }
    | DIVIDE               { DivideOp }
    | EQ                   { EqOp     }
    | NEQ                  { NeqOp    }
    | GT                   { GtOp     }
    | GE                   { GeOp     }
    | LT                   { LtOp     }
    | LE                   { LeOp     }
;
